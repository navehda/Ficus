<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>LLM Generated Code</title>
<style>



body {
font-family: Arial, sans-serif;
}
.prompt {
background-color: #f4f4f4;
border-left: 4px solid #6c757d;
padding: 10px;
margin-bottom: 10px;
color: #343a40;
}
.response {
background-color: #e9f7ef;
border-left: 4px solid #28a745;
padding: 10px;
color: #155724;
}
pre {
background-color: #f8f9fa;
padding: 10px;
border-radius: 4px;
overflow: auto;
border: 1px solid #ced4da;
}
</style>
</head>
<body>

<h1>Code Generated by LLM</h1>

<div class="prompt">
<strong>Prompt:</strong>
<p>Suggest a best-practice template for persist.js code file, that matches the project requirements.".</p>
</div>

<div class="response">
<strong>Response:</strong>
<p>The following code was generated:</p>
<pre><code>
const fs = require(&#39;fs&#39;);
const path = require(&#39;path&#39;);

// Paths to your data files
const usersFilePath = path.join(__dirname, &#39;data&#39;, &#39;users.json&#39;);
const cartFilePath = path.join(__dirname, &#39;data&#39;, &#39;cart.json&#39;);
const productsFilePath = path.join(__dirname, &#39;data&#39;, &#39;products.json&#39;);
const activityLogFilePath = path.join(__dirname, &#39;data&#39;, &#39;activity.json&#39;);

// Read data from a file
async function readData(filePath) {
try {
const data = await fs.promises.readFile(filePath, &#39;utf8&#39;);
return JSON.parse(data || &#39;[]&#39;);
} catch (error) {
console.error(`Error reading file: ${filePath}`, error);
throw error;
}
}

// Write data to a file
async function writeData(filePath, data) {
try {
await fs.promises.writeFile(filePath, JSON.stringify(data, null, 2), &#39;utf8&#39;);
} catch (error) {
console.error(`Error writing to file: ${filePath}`, error);
throw error;
}
}

// Specific functions for reading/writing users
async function getUsers() {
return readData(usersFilePath);
}

async function saveUsers(users) {
return writeData(usersFilePath, users);
}

// Specific functions for carts
async function getCarts() {
return readData(cartFilePath);
}

async function saveCarts(carts) {
return writeData(cartFilePath, carts);
}

// Specific functions for products
async function getProducts() {
return readData(productsFilePath);
}

async function saveProducts(products) {
return writeData(productsFilePath, products);
}

// Specific functions for activity logs
async function getActivityLogs() {
return readData(activityLogFilePath);
}

async function saveActivityLogs(logs) {
return writeData(activityLogFilePath, logs);
}

module.exports = {
getUsers,
saveUsers,
getCarts,
saveCarts,
getProducts,
saveProducts,
getActivityLogs,
saveActivityLogs
};
</code></pre>
</div>

<div class="prompt">
<strong>Prompt:</strong>
<p>Implement HTTPS support for the website.".</p>
</div>

<div class="response">
<strong>Response:</strong>
<p>The following code was generated:</p>
<pre><code>
// Load SSL certificate and private key
const privateKey = fs.readFileSync(path.join(__dirname, 'ssl', 'key.pem'), 'utf8');
const certificate = fs.readFileSync(path.join(__dirname, 'ssl', 'cert.pem'), 'utf8');

// Create credentials object
const credentials = { key: privateKey, cert: certificate };

// Redirect HTTP to HTTPS
const httpApp = express();
httpApp.use((req, res) => {
res.redirect(`https://${req.headers.host}${req.url}`);
});

const httpsServer = https.createServer(credentials, app);

// HTTPS server listens on port 443
httpsServer.listen(443, () => {
console.log('Ficus HTTPS Server running on port 443');
});


// HTTP server listens on port 80
const httpServer = http.createServer(httpApp);
httpServer.listen(80, () => {
console.log('Ficus HTTP Server running on port 80 (redirects to HTTPS)');
});
</code></pre>

<div class="prompt">
<strong>Prompt:</strong>
<p>Suggest middleware for handling cookies storage and rate limiting according to best parctices".</p>
</div>

<div class="response">
<strong>Response:</strong>
<p>The following code was generated:</p>
<pre><code>
    &lt;!-- Set up middleware --&gt;
    app.use(bodyParser.urlencoded({ extended: true })); &lt;!-- To parse URL-encoded data from forms --&gt;
    app.use(cookieParser()); &lt;!-- To parse cookies --&gt;
    const helmet = require('helmet');
    app.use(helmet()); &lt;!-- Automatically sets security headers --&gt;
    
    &lt;!-- Middleware to attach username globally to `res.locals` --&gt;
    app.use((req, res, next) =&gt; {
      res.locals.username = req.cookies.username || null; &lt;!-- Attach `username` to res.locals --&gt;
      next();  &lt;!-- Move to the next middleware or route handler --&gt;
    });
    
    &lt;!-- Rate limiting middleware --&gt;
    const limiter = rateLimit({
      windowMs: 15 * 60 * 1000, &lt;!-- 15 minutes --&gt;
      max: 5, &lt;!-- Limit each IP to 5 requests per windowMs --&gt;
      message: 'Too many requests, please try again in 15 minutes',
      standardHeaders: true, &lt;!-- Send rate limit info in the `RateLimit-*` headers --&gt;
      legacyHeaders: false, &lt;!-- Disable the `X-RateLimit-*` headers --&gt;
    });
    </code></pre>

<div class="prompt">
<strong>Prompt:</strong>
<p>How can I modify filters that exist in a template so that they matches my product categories?.</p>
</div>

<div class="response">
<strong>Response:</strong>
<p>The following code was generated:</p>
<pre><code>
    &lt;!-- route for filtering products by category --&gt;
    jQuery(document).ready(function($) {
      var $container = jQuery('#shop');
    
      $container.isotope({
        itemSelector: '.product',
        layoutMode: 'fitRows'
      });
    
      jQuery('.shop-filter a').click(function() {
        var filterValue = jQuery(this).attr('data-filter');
        $container.isotope({ filter: filterValue });
        return false;
      });
    });
    </code></pre>

<div class="prompt">
<strong>Prompt:</strong>
<p>Help me to modify the shop.ejs file, based on the template page, so that it implements my "add to cart" backend and "add to wishlist" backend.".</p>
</div>

<div class="response">
<strong>Response:</strong>
<p>The following code was generated:</p>
<pre><code>
&lt;div class=&quot;col-md-9&quot;&gt;
&lt;div id=&quot;shop&quot; class=&quot;row shop grid-container&quot; data-layout=&quot;fitRows&quot;&gt;
&lt;% if (products.length &gt; 0) { %&gt;
&lt;% products.forEach(product =&gt; { %&gt;
&lt;div class=&quot;col-lg-4 col-md-6 mb-4 product &lt;%= product.category.toLowerCase().replace(/\s+/g, &#39;-&#39;) %&gt;&quot;&gt;
&lt;div class=&quot;grid-inner&quot;&gt;
&lt;div class=&quot;product-image&quot;&gt;
&lt;div class=&quot;product-image&quot;&gt;
&lt;a href=&quot;/single/&lt;%= product.id %&gt;&quot; class=&quot;d-block w-100 h-100&quot;&gt;
&lt;img src=&quot;&lt;%= product.image %&gt;&quot; alt=&quot;&lt;%= product.name %&gt;&quot;&gt;
&lt;/a&gt;

&lt;!-- Place buttons outside the anchor tag to avoid interference --&gt;
&lt;div class=&quot;bg-overlay&quot;&gt;
&lt;div class=&quot;bg-overlay-content align-items-end justify-content-end&quot; data-hover-animate=&quot;fadeIn&quot;&gt;
&lt;!-- Add to Cart form --&gt;
&lt;form action=&quot;/cart/add&quot; method=&quot;POST&quot; style=&quot;display: inline-block;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;productId&quot; value=&quot;&lt;%= product.id %&gt;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;quantity&quot; value=&quot;1&quot;&gt;
&lt;button type=&quot;submit&quot; class=&quot;btn bg-color bg-opacity-75 text-light me-2 z-2&quot;&gt;
&lt;i class=&quot;bi-basket&quot;&gt;&lt;/i&gt; Add to Cart
&lt;/button&gt;
&lt;/form&gt;

&lt;!-- Add to Wishlist form --&gt;
&lt;form action=&quot;/wishlist/add&quot; method=&quot;POST&quot; style=&quot;display: inline-block;&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;productId&quot; value=&quot;&lt;%= product.id %&gt;&quot;&gt;
&lt;button type=&quot;submit&quot; class=&quot;btn btn-outline-secondary me-2 z-2&quot;&gt;
&lt;i class=&quot;bi-heart&quot;&gt;&lt;/i&gt; Add to Wishlist
&lt;/button&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;                                                                                                    
&lt;div class=&quot;product-desc text-center&quot;&gt;
&lt;div class=&quot;product-title&quot;&gt;
&lt;h3&gt;&lt;a href=&quot;/single/&lt;%= product.id %&gt;&quot; class=&quot;color&quot;&gt;&lt;%= product.name %&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;product-price fw-normal mt-0 mb-0&quot;&gt;
&lt;% if (product.originalPrice) { %&gt;
&lt;del class=&quot;op-07&quot;&gt;$&lt;%= product.originalPrice %&gt;&lt;/del&gt;
&lt;% } %&gt;
&lt;ins&gt;$&lt;%= product.price %&gt;&lt;/ins&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;% }); %&gt;
&lt;% } else { %&gt;
&lt;p&gt;No products found matching your search.&lt;/p&gt;
&lt;% } %&gt;
&lt;/div&gt;
&lt;/div&gt;
</code></pre>



<div class="prompt">
<strong>Prompt:</strong>
<p>I would like to style the /llm page as prompts and their responses, any ideas how to do it easily?".</p>
</div>

<div class="response">
<strong>Response:</strong>
<p>The following code was generated:</p>
<pre><code>
This is the code for what you are looking at right now :]
</code></pre>


